AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  ComeInDBHost:
    Type: String
    Description: db host
    Default: 'comeindb2.cstlg3ladsl5.ap-southeast-1.rds.amazonaws.com'
  ComeInDBPort:
    Type: String
    Description: db port
    Default: '5432'
  ComeInDBUsername:
    Type: String
    Description: db username
    Default: 'comein'
  ComeInDBPassword:
    Type: String
    Description: db password
    Default: 'q2deqkTna5GyxxHlkR1d'
  ComeInDBInstance:
    Type: String
    Description: db instance
    Default: 'comein'
  ComeInCognitoUserPoolId:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'ap-southeast-1_sH5GQOfGD'
  ComeInCognitoRegion:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'ap-southeast-1'
  ComeInResponseTemplate:
    Type: String
    Description: response-template
    Default: $input.json('$.json-body')
  ComeInRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "getHelloWorld" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }

  GetHelloWorldRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "getHelloWorld" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }       
      
  PostHelloWorldRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postHelloWorld" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }          

  PostTestRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postTest" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }    
      
            
  ListBookingByEmailRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postListBookingByEmail" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }

            
  ListTourBookingByEmailRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postListTourBookingByEmail" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }

               
  ViewHotelBookingByBookNORequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postViewHotelBookingByBookNO" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }

               
  DeleteHotelBookingKYCRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postDeleteHotelBookingKYC" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
  
   
  AddHotelBookingKYCRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postAddHotelBookingKYC" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
  
             
  ListTourTicketByDateRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postListTourTicketByDate" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
 
  ViewTourTicketByTourIdRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postViewTourTicketByTourId" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
 
 
 
  ReserveTourTicketRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postReserveTourTicket" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
 
 
  ViewTourBookingByCodeRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postViewTourBookingByCode" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
  
  
 
  AddKYCInfoRequestTemplate:
    Type: String
    Description: request-template
    Default: |
      #set($allParams = $input.params())
      {
      "body" : "$util.escapeJavaScript($input.body)",
      "json-body" : $input.json('$'),
      "path" : "$context.resourcePath",
      "profile":{
         "email" : "$context.authorizer.claims.email",
         "comein-id":"$context.authorizer.claims['custom:comein_id']",
         "ref-name" : "$context.authorizer.claims.name",
         "sub" : "$context.authorizer.claims.sub"
        }, 
      #set($header_params = $allParams.get('header'))
      "headers" : {
        "spring.cloud.function.definition" : "postAddKYCInfo" #if($header_params.size() > 0),#end
            #foreach($paramName in $header_params.keySet())
              "$paramName" : "$util.escapeJavaScript($header_params.get($paramName))"
              #if($foreach.hasNext),#end
            #end
      },
      #set($path_params = $allParams.get('path'))
      "path-parameters" : {
          #foreach($paramName in $path_params.keySet())
          "$paramName" : "$util.escapeJavaScript($path_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      #set($query_params = $allParams.get('querystring'))
      "query-string-parameters" : {
          #foreach($paramName in $query_params.keySet())
          "$paramName" : "$util.escapeJavaScript($query_params.get($paramName))"
              #if($foreach.hasNext),#end
          #end
      },
      "stage-variables" : {
      #foreach($key in $stageVariables.keySet())
      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
          #if($foreach.hasNext),#end
      #end
      },
      "request-context" : {
          "account-id" : "$context.identity.accountId",
          "api-id" : "$context.apiId",
          "api-key" : "$context.identity.apiKey",
          "authorizer-principal-id" : "$context.authorizer.principalId",
          "caller" : "$context.identity.caller",
          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
          "http-method" : "$context.httpMethod",
          "stage" : "$context.stage",
          "source-ip" : "$context.identity.sourceIp",
          "user" : "$context.identity.user",
          "user-agent" : "$context.identity.userAgent",
          "user-arn" : "$context.identity.userArn",
          "request-id" : "$context.requestId",
          "resource-id" : "$context.resourceId",
          "resource-path" : "$context.resourcePath"
          }
      }
      
Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:

  ComeInRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      # Body:
        # OpenAPI specification: null
      Description: Centaurs ComeIn API
      Name: MyCentaursAPI
      
  ComeInAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:  
      Name: comein_authorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ComeInRestApi
      IdentitySource: method.request.header.comein_auth
      ProviderARNs: 
        - !Sub arn:aws:cognito-idp:${ComeInCognitoRegion}:${AWS::AccountId}:userpool/${ComeInCognitoUserPoolId}
      
  MyCentaursFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-MyCentaursFunc'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword
      Runtime: java11
      Timeout: 90
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
 
  SignUpPrePDPAInfoFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-SignUpPrePDPAInfo'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Environment:
        Variables:
          spring_cloud_function_definition: cognitoSignUpPrePDPAInfo
          DB_HOST: !Ref ComeInDBHost
          DB_PORT: !Ref ComeInDBPort
          DB_INSTANCE: !Ref ComeInDBInstance
          DB_USERNAME: !Ref ComeInDBUsername
          DB_PASSWORD: !Ref ComeInDBPassword
      Runtime: java11
      Timeout: 90
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn     
          
# Start API Function - GetHelloWorld 
  GetHelloWorldPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hello-world

  GetHelloWorldResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: hello-world

  GetHelloWorldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref GetHelloWorldResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref GetHelloWorldRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - GetHelloWorld 

# Start API Function - PostHelloWorld 
  PostHelloWorld2Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hello-world2

  PostHelloWorldResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: hello-world2

  PostHelloWorldMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref PostHelloWorldResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref PostHelloWorldRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - PostHelloWorld 

# Start API Function - PostTest
  PostTestPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/test

  PostTestResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: test

  PostTestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref PostTestResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref PostTestRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - PostTest

# Start API Function - ListBookingByEmail 
  ListBookingByEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking

  ListBookingByEmailResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: hotel-booking

  ListBookingByEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ListBookingByEmailResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ListBookingByEmailRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ListBookingByEmail 

        
# Start API Function - GetHelloWorld 
  ListTourBookingByEmailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/tour-booking

  ListTourBookingByEmailResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: tour-booking

  ListTourBookingByEmailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ListTourBookingByEmailResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ListTourBookingByEmailRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ListTourBookingByEmail 

        
# Start API Function - ViewHotelBookingByBookNO 
  ViewHotelBookingByBookNOPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking/view

  ViewHotelBookingByBookNOResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListBookingByEmailResource
      PathPart: view

  ViewHotelBookingByBookNOMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ViewHotelBookingByBookNOResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ViewHotelBookingByBookNORequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ViewHotelBookingByBookNO 

        
# Start API Function - DeleteHotelBookingKYC 
  DeleteHotelBookingKYCPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking/delete-kyc

  DeleteHotelBookingKYCResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListBookingByEmailResource
      PathPart: delete-kyc

  DeleteHotelBookingKYCMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref DeleteHotelBookingKYCResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref DeleteHotelBookingKYCRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - DeleteHotelBookingKYC 

# Start API Function - AddHotelBookingKYC 
  AddHotelBookingKYCPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/hotel-booking/add-kyc

  AddHotelBookingKYCResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !Ref ListBookingByEmailResource
      PathPart: add-kyc

  AddHotelBookingKYCMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref AddHotelBookingKYCResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref AddHotelBookingKYCRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - AddHotelBookingKYC 


        
# Start API Function - ListTourTicketByDate 
  ListTourTicketByDatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/tour-ticket

  ListTourTicketByDateResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId:  !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: tour-ticket

  ListTourTicketByDateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ListTourTicketByDateResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ListTourTicketByDateRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ListTourTicketByDate 


        
# Start API Function - ViewTourTicketByTourId 
  ViewTourTicketByTourIdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/tour-ticket/view

  ViewTourTicketByTourIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId:  !Ref ListTourTicketByDateResource
      PathPart: view

  ViewTourTicketByTourIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ViewTourTicketByTourIdResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ViewTourTicketByTourIdRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ViewTourTicketByTourId 

# Start API Function - ReserveTourTicket 
  ReserveTourTicketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/tour-ticket/reserve

  ReserveTourTicketResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId:  !Ref ListTourTicketByDateResource
      PathPart: reserve

  ReserveTourTicketMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ReserveTourTicketResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ReserveTourTicketRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ReserveTourTicket 


# Start API Function - ViewTourBookingByCode 
  ViewTourBookingByCodePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/tour-booking/view

  ViewTourBookingByCodeResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId:  !Ref ListTourBookingByEmailResource
      PathPart: view

  ReserveTourTicketMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref ViewTourBookingByCodeResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref ViewTourBookingByCodeRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - ViewTourBookingByCode 


# Start API Function - AddKYCInfo 
  AddKYCInfoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyCentaursFunc
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ComeInRestApi}/*/POST/kyc-info/add
      
  ListKYCInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId: !GetAtt 
        - ComeInRestApi
        - RootResourceId
      PathPart: kyc-info
      
  AddKYCInfoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ComeInRestApi
      ParentId:  !Ref ListKYCInfoResource
      PathPart: add

  AddKYCInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ComeInRestApi
      ResourceId: !Ref AddKYCInfoResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ComeInAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:  !Join ['', ['arn:aws:apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt MyCentaursFunc.Arn, '/invocations']]
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates: 
          'application/json': !Ref AddKYCInfoRequestTemplate
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              'application/json' : !Ref ComeInResponseTemplate
      MethodResponses:
        - StatusCode: 200     
# End API Function - AddKYCInfo 

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
